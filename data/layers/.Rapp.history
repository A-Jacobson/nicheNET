scatterplot(pcaprecip~pcatemp | sp, data=dat, smooth=F, reg.line=F,ellipse=T, pch=palette()[1], levels=.9)
scatterplot(pcaprecip~pcatemp | sp, data=dat, smooth=F, reg.line=F,ellipse=T, pch=palette()[2], levels=.9)
scatterplot(pcaprecip~pcatemp | sp, data=dat, smooth=F, reg.line=F,ellipse=T, col=palette()[2], levels=.9)
scatterplot(pcaprecip~pcatemp | sp, data=dat, smooth=F, reg.line=F,ellipse=T, col=palette(2), levels=.9)
scatterplot(pcaprecip~pcatemp | sp, data=dat, smooth=F, reg.line=F,ellipse=T, col=palette(), levels=.9)
scatterplot(pcaprecip~pcatemp | sp, data=dat, smooth=F, reg.line=F,ellipse=T, col=palette(grey), levels=.9)
scatterplot(pcaprecip~pcatemp | sp, data=dat, smooth=F, reg.line=F,ellipse=T, col=palette("grey"), levels=.9)
scatterplot(pcaprecip~pcatemp | sp, data=dat, smooth=F, reg.line=F,ellipse=T, col=palette(red), levels=.9)
scatterplot(pcaprecip~pcatemp | sp, data=dat, smooth=F, reg.line=F,ellipse=T, col=palette(), levels=.9)
scatterplot(pcaprecip~pcatemp | sp, data=dat, smooth=F, reg.line=F,ellipse=T, col=colarRamp(c("red","blue")), levels=.9)
scatterplot(pcaprecip~pcatemp | sp, data=dat, smooth=F, reg.line=F,ellipse=T, col=colerRamp(c("red","blue")), levels=.9)
scatterplot(pcaprecip~pcatemp | sp, data=dat, smooth=F, reg.line=F,ellipse=T, col=colorRamp(c("red","blue")), levels=.9)
scatterplot(pcaprecip~pcatemp | sp, data=dat, smooth=F, reg.line=F,ellipse=T, col=colorRamp(c("red")), levels=.9)
scatterplot(pcaprecip~pcatemp | sp, data=dat, smooth=F, reg.line=F,ellipse=T, levels=.9)
scatterplot(pcaprecip~pcatemp | sp, data=dat, smooth=F, reg.line=F,ellipse=T, color.palette=colorRamp(c("red")), levels=.9)
scatterplot(pcaprecip~pcatemp | sp, data=dat, smooth=F, reg.line=F,ellipse=T, color.palette=colorRamp(c("red","blue")), levels=.9)
scatterplot(pcaprecip~pcatemp | sp, data=dat, smooth=F, reg.line=F,ellipse=T, color.palette=colorRamp(c("red","green")), levels=.9)
scatterplot(pcaprecip~pcatemp | sp, data=dat, smooth=F, reg.line=F,ellipse=T, col=("red","green")), levels=.9)
scatterplot(pcaprecip~pcatemp | sp, data=dat, smooth=F, reg.line=F,ellipse=T, col=("red","green"), levels=.9)
scatterplot(pcaprecip~pcatemp | sp, data=dat, smooth=F, reg.line=F,ellipse=T, col=(c("red","green")), levels=.9)
scatterplot(pcaprecip~pcatemp | sp, data=dat, smooth=F, reg.line=F,ellipse=T, col=(c("blue","red")), levels=.9)
dip <- raster("~/Desktop/enm workshop/diplomenziesii_0.asc")#
tetra <- raster("~/Desktop/enm workshop/menziesii_0.asc")
require(raster)
require(ENMeval)
dip <- raster("~/Desktop/enm workshop/diplomenziesii_0.asc")#
tetra <- raster("~/Desktop/enm workshop/menziesii_0.asc")
stack <- rasterstack(dip, tetra)
stack <- stack(dip, tetra)
require(dismo)
x <- raster("~/Desktop/enm workshop/diplomenziesii_0.asc")
y <- raster("~/Desktop/enm workshop/menziesii_0.asc")
nicheOverlap(x, y, stat='D', mask=TRUE, checkNegatives=TRUE)
require(raster)
require(raster)#
library (sp)#
library (rgdal)#
library (raster)#
library (maps)#
library (mapproj)#
library(sp)#
library(maptools)
library("raster")#
library("dismo")
x <- raster("~/Desktop/mimulus/Cupreus/Mimulus_cupreus_avg.asc")
y <- raster("~/Desktop/mimulus/depressus/Mimulus_depressus_avg.asc")
nicheOverlap(x, y, stat="D", mask=TRUE, checkNegatives=TRUE)
x <- raster("~/Desktop/mimulus/Cupreus/Mimulus_cupreus_avg.asc")
y <- raster("~/Desktop/mimulus/luteus.all/Mimulus_luteus_avg.asc")
nicheOverlap(x, y, stat="D", mask=TRUE, checkNegatives=TRUE)
x <- raster("~/Desktop/mimulus/depressus/Mimulus_depressus_avg.asc")
y <- raster("~/Desktop/mimulus/luteus.all/Mimulus_luteus_avg.asc")
nicheOverlap(x, y, stat="D", mask=TRUE, checkNegatives=TRUE)
plot(c(0,1,1),type="b", yaxp= c(-1,0,1), ylim=c(-1,1),xaxp=c(0,1,2))
plot(c(0,0,1),type="b", yaxp= c(-1,0,1), ylim=c(-1,1),xaxp=c(0,1,2))
plot(c(0,1,0),type="b", yaxp= c(-1,0,1), ylim=c(-1,1),xaxp=c(0,1,2))
plot(c(1,0,0),type="b", yaxp= c(-1,0,1), ylim=c(-1,1),xaxp=c(0,1,2))
plot(c(1,0,1),type="b", yaxp= c(-1,0,1), ylim=c(-1,1),xaxp=c(0,1,2))
plot(c(1,1,0),type="b", yaxp= c(-1,0,1), ylim=c(-1,1),xaxp=c(0,1,2))
plot(c(-1,-1,-1),type="b", yaxp= c(-1,0,1), ylim=c(-1,1),xaxp=c(0,1,2))
plot(c(0,-1,-1),type="b", yaxp= c(-1,0,1), ylim=c(-1,1),xaxp=c(0,1,2))
plot(c(0,0,-1),type="b", yaxp= c(-1,0,1), ylim=c(-1,1),xaxp=c(0,1,2))
plot(c(0,-1,0),type="b", yaxp= c(-1,0,1), ylim=c(-1,1),xaxp=c(0,1,2))
plot(c(-1,0,0),type="b", yaxp= c(-1,0,1), ylim=c(-1,1),xaxp=c(0,1,2))
plot(c(-1,0,-1),type="b", yaxp= c(-1,0,1), ylim=c(-1,1),xaxp=c(0,1,2))
plot(c(-1,-1,0),type="b", yaxp= c(-1,0,1), ylim=c(-1,1),xaxp=c(0,1,2))
plot(c(-1,-1,0),type="b", yaxp= c(-1,0,1), ylim=c(-1,1.1),xaxp=c(0,1,2))
source("https://bioconductor.org/biocLite.R")#
biocLite("geneLenDataBase")
biocLite("GO.db")
biocLite("qvalue")
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec()
IRkernel::installspec(user = FALSE)
library(IRkernel)
IRkernel::installspec(user = FALSE)
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))#
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec(user = FALSE)
setwd('~/Desktop/dadNet')#
library(raster)#
library(spatial.tools)#
library(rgdal)#
list <- list.files(path="~/Desktop/dadNet/tetra_layers", pattern="*.asc")#
nlist <- length(list)#
list#
nlist#
setwd("~/Desktop/dadNet/tetra_layers")#
Stack <- stack(list)#
res <- res(Stack)#
buf<- unlist(res[1]*5)  #change the 5 to whatever radius you want for punches#
Stack#
setwd("~/Desktop/dadNet")
read.csv("TolmieaLocs.csv")->points #
points[,2:3] -> points#
colnames(points) <- c("x", "y")#
unique(points) -> points#
npoints<- nrow(points)#
head(points)#
plot(Stack)#
npoints#
#
#test without loop#
cell<-cellFromXY(object=Stack,xy=points[1,])# get the cell number
Stack$bio1
names(Stack)
Stack$bio8
Stack$bio2
Stack[1]
Stack[2]
Stack$1
cell
adjaceny(Stack$bio8,cell,directions=4,pairs=F,include=T)
adjacency(Stack$bio8,cell,directions=4,pairs=F,include=T)
adjacent(Stack$bio8,cell,directions=4,pairs=F,include=T)
background <- sampleRandom(rasterbis, 279, cells=T, xy = TRUE, sp=F, na.rm = TRUE)  #set number of reps
rasterbis <- raster("~/Desktop/dadNet/tetra_layers/bio11.asc")
background <- sampleRandom(rasterbis, 279, cells=T, xy = TRUE, sp=F, na.rm = TRUE)  #set number of reps
head(background)
background[,2:3] -> background
head(background)
typeof(background)
head(background)
typeof(background)
as.numeric(background)
background <- data.frame(background)
background
colnames(background) <- c("x", "y")
unique(background) -> background
nbackground<- nrow(background)
nbackground
dir.create("false")#
for (i in 1:nbackground) {#
	cell<-cellFromXY(object=Stack,xy=background[i,])# get the cell number#
		if (cell %in% truecells){#
			print(paste0(cell," is present in true dataset"))#
			} else {#
	xmin<-background[i,1] - buf#
	xmax<-background[i,1] + buf#
	ymin<-background[i,2] - buf #
	ymax<-background[i,2] + buf#
	ev<-c(xmin, xmax, ymin, ymax)#
	e<- extent(ev)#
	punch <- crop(Stack, e)#
	print(punch)#
	dir.create(noquote(paste0("false/",cell)))#
	writeRaster(punch, filename=paste0("false/",cell,"/",cell,".asc"), bylayer=T)#
	print(noquote(paste0(cell,".asc")))#
}}
setwd('~/Desktop/dadNet')#
library(raster)#
library(spatial.tools)#
library(rgdal)#
list <- list.files(path="~/Desktop/dadNet/tetra_layers", pattern="*.asc")#
nlist <- length(list)#
list#
nlist#
setwd("~/Desktop/dadNet/tetra_layers")#
Stack <- stack(list)#
res <- res(Stack)#
buf<- unlist(res[1]*5)  #change the 5 to whatever radius you want for punches#
Stack#
setwd("~/Desktop/dadNet")#
read.csv("TolmieaLocs.csv")->points #
points[,2:3] -> points#
colnames(points) <- c("x", "y")#
unique(points) -> points#
npoints<- nrow(points)#
head(points)#
plot(Stack)#
npoints#
#
#test without loop#
cell<-cellFromXY(object=Stack,xy=points[1,])# get the cell number#
#buffer <- c(1,1,1,1,1,#
#
cell#
adjacent(Stack$bio8,cell,directions=4,pairs=F,include=T)#
#
xmin=points$x[1] - buf#
xmax<-points$x[1] + buf#
ymin<-points$y[1] - buf #
ymax<-points$y[1] + buf#
ev<-c(xmin, xmax, ymin, ymax)#
e<- extent(ev)#
punch <- crop(Stack, e)#
plot(punch)#
punch#
writeRaster(punch, filename="test.asc", bylayer=T)#
#
dir.create("true")#
truecells <- c()#
#
for (i in 1:npoints){#
	cell<-cellFromXY(object=Stack,xy=points[i,])# get the cell number#
	xmin=points$x[i] - buf#
	xmax<-points$x[i] + buf#
	ymin<-points$y[i] - buf #
	ymax<-points$y[i] + buf#
	ev<-c(xmin, xmax, ymin, ymax)#
	e<- extent(ev)#
	punch <- crop(Stack, e)#
	dir.create(noquote(paste0("true/",cell)))#
	writeRaster(punch, filename=paste0("true/",cell,"/",cell,".asc"), bylayer=T)#
	print(noquote(paste0(cell,".asc")))#
	truecells <- c(truecells,cell)#
}#
#
#raster for sampling#
rasterbis <- raster("~/Desktop/dadNet/tetra_layers/bio11.asc")
dir.create("false")#
for (i in 1:nbackground) {#
	cell<-cellFromXY(object=Stack,xy=background[i,])# get the cell number#
		if (cell %in% truecells){#
			print(paste0(cell," is present in true dataset"))#
			} else {#
	xmin<-background[i,1] - buf#
	xmax<-background[i,1] + buf#
	ymin<-background[i,2] - buf #
	ymax<-background[i,2] + buf#
	ev<-c(xmin, xmax, ymin, ymax)#
	e<- extent(ev)#
	punch <- crop(Stack, e)#
	print(punch)#
	dir.create(noquote(paste0("false/",cell)))#
	writeRaster(punch, filename=paste0("false/",cell,"/",cell,".asc"), bylayer=T)#
	print(noquote(paste0(cell,".asc")))#
}}
adjacent(Stack$bio8,cell,directions=4,pairs=F,include=T)
cells <- adjacent(Stack$bio8,cell,directions=4,pairs=F,include=T)
cells
rasterFromCells(Stack, cells, values=T)
rasterFromCells(Stack, cells, values=T)
#buffer <- matrix(1, 10, 10)
buffer <- matrix(1, 10, 10)
buffer
buffer <- matrix(1, 11, 11)
buffer[,]
buffer[5,5]
buffer[5,5] <- 0
buffer
buffer[6,6] <- 0
buffer
buffer <- matrix(1, 11, 11)
buffer[6,6] <- 0
buffer
cells <- adjacent(Stack$bio8,cell,directions=buffer,pairs=F,include=T)
cells
test <- rasterFromCells(Stack, cells, values=T)
plot(test)
test
cells <- adjacent(Stack$bio8,cell,directions=buffer,pairs=T,include=T)
cells
cells <- adjacent(Stack,cell,directions=buffer,pairs=T,include=T)
cells
test <- rasterFromCells(Stack, cells, values=T)
plot(test)
plot(test)
test
Stack
Stack[cells]
Stack$bio8[cells]
Stack$bio8
Stack$bio8[cells]
cells <- adjacent(list,cell,directions=buffer,pairs=T,include=T)
setwd("~/Desktop/dadNet")
Stack <- stack(./tetra_layers/list)
Stack <- stack(''./tetra_layers/'list)
setwd("./tetra_layers")
setwd("../")
setwd("./tetra_layers")
res <- res(Stack)
setwd("./tetra_layers")
res
unlist(res[1]*5)
res[1]*5
test <- rasterFromCells(list, cells, values=T)
cells <- adjacent(raster(list[1]),cell,directions=buffer,pairs=T,include=T)
cells
test <- rasterFromCells(Stack, cells, values=T)
plot(test)
cells
cells <- adjacent(raster(list[1]),cell,directions=buffer,pairs=F,include=T)
cells
test <- rasterFromCells(Stack, cells, values=T)
plot(test)
test
cells <- adjacent(raster(list[1]),cell,directions=buffer,pairs=F,include=T, values=T)
cells
test <- rasterFromCells(raster(list[1]), cells, values=T)
plot(test)
test
test <- rasterFromCells(raster(list[1]), cells, values=F)
plot(test)
test
r <- rasterFromCells(raster(list[1]), cells, values=F)
r
dim(raster(list[1]))[3]
result = foreach(i = 1:dim(raster(list[1]))[3],.packages='raster',.combine=rbind,.inorder=T) %dopar% {#
     #get value and store#
     getValues(crop(NDVI_stack_h24v06[[i]],r))
)
result = foreach(i = 1:dim(raster(list[1]))[3],.packages='raster',.combine=rbind,.inorder=T) %dopar% {#
     #get value and store#
     getValues(crop(raster(list[1])[[i]],r))#
}
result
plot(result)
getRasterData()
getRasterData(Stack, cells)
test
extract(Stack, cells)
plot(extract(Stack, cells))
r <- rasterFromCells(raster(list[1]), cells, values=F)
r
r <- rasterFromCells(raster(list[1]), cells, values=T)
r
r <- rasterFromCells(raster(list[1]), cells, values=F)
r <- rasterFromCells(raster(list[1]), cells, values=T)
crop(Stack, r)
dir.create("true", overwrite=T)
setwd("./tetra_layers")
ras<- raster(list[1])
cells <- adjacent(ras,cell,directions=buffer,pairs=T,include=T)
cells
cells <- adjacent(ras,cell,directions=buffer,pairs=F,include=T)
cell
cells <- adjacent(Stack,cell,directions=buffer,pairs=T,include=T)
cells <- adjacent(ras,cell,directions=buffer,pairs=T,include=T)
cells <- adjacent(Stack,cell,directions=buffer,pairs=T,include=T)
r <- rasterFromCells(Stack, cells, values=T)
punch <- crop(Stack, r)
plot(punch)
print(punch)
writeRaster(punch, filename="test.asc", bylayer=T)
dir.create("true")#
truecells <- c()#
for (i in 1:npoints){#
	cell<-cellFromXY(object=Stack,xy=points[i,])# get the cell number#
	cells <- adjacent(Stack,cell,directions=buffer,pairs=T,include=T)#
	r <- rasterFromCells(Stack, cells, values=T)#
	punch <- crop(Stack, e)#
	dir.create(noquote(paste0("true/",cell)))#
	writeRaster(punch, filename=paste0("true/",cell,"/",cell,".asc"), bylayer=T)#
	print(noquote(paste0(cell,".asc")))#
	truecells <- c(truecells,cell)#
}
Stack
nlayers(Stack)
ras
background <- sampleRandom(ras, 279, cells=T, xy = TRUE, sp=F, na.rm = TRUE)  #set number of reps
head(background)
background <- sampleRandom(ras, 279, cells=T, xy = TRUE, sp=F, na.rm = TRUE)  #set number of reps
background[,1] -> background
head(background)
unique(background) -> background
nbackground<- nrow(background)
nbackground
background <- sampleRandom(ras, 279, cells=T, xy = TRUE, sp=F, na.rm = TRUE)  #set number of reps
background[,1] -> background
head(background)
unique(background) -> background
nbackground<- nrow(background)
nbackground
background
typeof(background)
nbackground<- nrow(data.frame(background))
nbackground
data.frame(background[,1]) -> background
head(background)
background<- data.frame(background)
background <- sampleRandom(ras, 279, cells=T, xy = TRUE, sp=F, na.rm = TRUE)  #set number of reps
background[,1] -> background
background<- data.frame(background)
unique(background) -> background
nbackground<- nrow(background)
nbackground
dir.create("false")
for (i in 1:nbackground) {
}
i
background(i)
background[i]
background[i,1]
background
background[i,1]
dir.create("false")#
for (i in 1:nbackground) {#
	cell <- background[i,1]#
			if (cell %in% truecells){#
			print(paste0(cell," is present in true dataset"))#
			} else {#
	cells <- adjacent(Stack,cell,directions=buffer,pairs=T,include=T)#
	r <- rasterFromCells(Stack, cells, values=T)#
	punch <- crop(Stack, e)#
	print(punch)#
	dir.create(noquote(paste0("false/",cell)))#
	writeRaster(punch, filename=paste0("false/",cell,"/",cell,".asc"), bylayer=T)#
	print(noquote(paste0(cell,".asc")))#
}}
cell <- background[i,1]
cells <- adjacent(Stack,cell,directions=buffer,pairs=T,include=T)
cells
r <- rasterFromCells(Stack, cells, values=T)
plot(r)
punch <- crop(Stack, r)
print(punch)
